#===============================================================
# cdhist:
#   shell `cd`` command extensions for bash/ksh/zsh/ash
#   dir history / subdir explore
#   . ./cdhist
#   
#   cd <dir> : change dir and push directory to CDHISTORYFILE
#   cd -- [-a] [<pat> ...] : display/choose in dir history
#     -a    : all dir history (CDNBDIRS without -a)
#     <pat> : grep pattern to search in history
#             if unique dir found, cd to dir
#             multiple pattern will grep <pat>.*<pat>...
#   cd - [-a] <pat> [<pat>...] : search and cd to first dir matching 
#             <pat> in history
#   cd + [<pat>...] : display choose subdirs or cwd
#   cd ++ [<pat>...] : displau choose subdirs until depth 4
#
#   aliases `cd-` `cd--` `cd+` `cd++` instead of `cd <sign>` commands
# 
# environment vars:
#   CDHISTORYFILE : default to ~/.cd_history
#   CDNBDIRS      : default to 10 (nbdir history to display)
#   CDINITDIRS    : add directories if $CDHISTORYFILE is empty
#   CDPOWERLINE   : y or n powerline symbol usage
#================================================================

unalias cd 2>/dev/null
type typeset >/dev/null 2>/dev/null || alias typeset=local # ash
touch ${CDHISTFILE:=~/.cd_history}
: ${CDPOWERLINE:=y}

# change directory and updpate CDHISTFILE
function cdpush {
    typeset cdhf=${CDHISTFILE:-~/.cd_history}
    case "$1" in 
        --) shift; cdhist "$@"; return $?;;
        -)  [ "$2" ] && { cdhist "$@"; return $?; };;
        +)  shift; cdsub 1 "$@"; return $?;;
        ++) shift; cdsub 4 "$@"; return $?;;
        ~*) set -- "$HOME${1#\~}";;
    esac
    [ "$_cdpr" = 1 ] && {
      printf "%q " "cd" "$@"
      return 0
    } || {
      \cd "$@" || return $?
    }
    printf "%s\n" "$PWD" >"$cdhf.tmp"
    grep -v "^$PWD$" "$cdhf" >>"$cdhf.tmp"
    [ -s "$cdhf.tmp" ] && \mv "$cdhf.tmp" "$cdhf"
    return 0
}

function cdselect
{
    typeset dir nb=$1
    dir=$(selector -P $CDPOWERLINE -m $nb -p cd -i "$2")
    [ "$dir" ] && cdpush "$dir"
}

# cdhist    : Display CDNBDIRS history
# cdhist -a : whole history
# cdhist [-a] <pattern> [<pat>...]: display dirs matching pattern/cd to dir if unique found
function cdhist {
    typeset gr=. nb=${CDNBDIRS:-10} cdhf=${CDHISTFILE:-~/.cd_history} first='' awk=awk dir
    [ ! -s "$cdhf" ] && echo "$CDINITDIRS" >$cdhf
    [ "$1" = -a ] && nb=-1 && shift
    [ "$1" = - ] && first="exit" && shift
    [ -x /bin/nawk ] && awk=nawk
    [ "$1" ] && gr=$($awk 'BEGIN{OFS=".*";for(i=1;i<ARGC;i++) $i=ARGV[i];print}' "$@")
    cdselect $nb "$($awk '$0 == pwd {next} $0 ~ gr {n++;sub("^"hom,"~");print;'$first'}' gr="$gr" pwd="$PWD" nb=$nb hom=$HOME $cdhf)"
}

# display/change to subdirs of cwd
# cdsub <depth> [<pat> ...]
function cdsub {
    typeset depth="$1" gr=. awk=awk
    shift
    [ -x /bin/nawk ] && awk=nawk
    [ "$1" ] && gr=$($awk 'BEGIN{OFS=".*";for(i=1;i<ARGC;i++) $i=ARGV[i];print}' "$@")
    cdselect -1 "$(find . -xdev -mindepth 1 -maxdepth $depth -name '.?*' -prune -o -type d -print |egrep "$gr" 2>/dev/null)"
}

# use locate to get directories
function locatedir {
    typeset file gr awk=awk
    [ "$1" ] || return
    [ -x /bin/nawk ] && awk=nawk
    gr=$($awk 'BEGIN{OFS=".*";for(i=1;i<ARGC;i++) $i=ARGV[i];print}' "$@")
    shift $(($# - 1))
    locate -r "$gr" |awk -F'/' '/\/\.|^\/snap/{next}$NF ~ gr' gr=${1##*/} |while read file
    do
        [ -d "$file" ] && echo "$file"
    done
}

function cdlocate {
    cdselect -1 "$(locatedir "$@")"
}

alias cd=cdpush
alias cd-='cd -'
alias cd--=cdhist
alias cd+='cdsub 1'
alias cd++='cdsub 4'
alias cdl=cdlocate

# Alt-C to get cdhist
[ "$BASH" ] && {
    bind -m vi-insert '"\C-xr": redraw-current-line'
    bind -m vi-insert '"\C-xk": backward-kill-line'
    bind -m vi-insert '"\C-xx": shell-expand-line'
    bind -m vi-insert '"\ec": ".\C-xk$(_cdpr=1 cdhist \C-y\C-h)\C-xx\C-xr\015"'
    bind -m vi-command '"!": "a.\C-xk$(_cdpr=1 cdhist \C-y\C-h)\C-xx\C-xr\015"'
    bind -m vi-command '"l": "a.\C-xk$(_cdpr=1 cdlocate \C-y\C-h)\C-xx\C-xr\015"'

    bind -m emacs-standard '"\C-xr": redraw-current-line'
    bind -m emacs-standard '"\C-xk": backward-kill-line'
    bind -m emacs-standard '"\C-xx": shell-expand-line'
    bind -m emacs-standard '"\ec": ".\C-xk$(_cdpr=1 cdhist \C-y\C-h)\C-xx\C-xr\015"'
    bind -m emacs-standard '"\M-!": ".\C-xk$(_cdpr=1 cdhist \C-y\C-h)\C-xx\C-xr\015"'
    bind -m emacs-standard '"\M-l": ".\C-xk$(_cdpr=1 cdlocate \C-y\C-h)\C-xx\C-xr\015"'

}

### selector from https://github.com/joknarf/selector

# no proper way to restore tty on trap
function _ctrl_c
{
  tput ich 16
  printf "(Ctl-X to exit)\r"
}

function _menuprompt
{
  typeset form filter=${3:-${_aitems[$_nsel]}} nb="$_nsel/$2 "
  [ "$3" ] && nb=""
  printf "\r"
  form="$1: %s%s"
  [ "$_powerline" = "y" ] && {
    [ "$3" ] && form="\e[30m\e[44m\e[97m $1 \e[0m\e[34m\e[44m\e[49m\e[0m %s%s" || \
                form="\e[30m\e[44m\e[97m $1 \e[0m\e[34m\e[44m\e[100m\e[97m %s\e[0m\e[90m\e[100m\e[49m\e[0m %s"
  }
  printf "$form" "$nb" "$filter"
  tput el
  printf "\r"
}

function _showmenu 
{
  typeset prompt="$1" nsel="$2" nbitems="$3" filter="$4" item i min max sel lines

  _menuprompt "$prompt" "$nbitems" "$filter"
  w=$nbitems;w=${#w}
  lines=${_maxlines:-$LINES}
  [ $lines -gt $LINES ] && lines=$LINES
  min=$(($nsel-$lines+2))
  [ "$min" -le 0 ] && min=1
  max=$(($min+$lines-2))
  i=0
  sel="\n\e[30m\e[46m\e[97m %${w}s \e[0m\e[1;96m %s\e[0m"
  [ "$_powerline" = y ] && sel="\n\e[30m\e[46m\e[97m %${w}s \e[0m\e[36m\e[46m\e[49m\e[0m\e[1;96m%s\e[0m"
  while [ $i -lt $nbitems ]
  do
    i=$((i + 1))
    item="${_aitems[$i]}"
    [[ $i -ge $min ]] || continue
    [[ $i -le $max ]] || break
    if [[ $nsel == "$i" ]]; then 
      printf "$sel" $i "$item"
    else
      printf "\n\e[32m %${w}s  \e[94m%s\e[0m" $i "$item"
    fi
    tput el #clear end of line
  done
  size=$((nbitems+1))
  [ "$size" -gt $lines ] && size=$lines
  # back to top of menu
  i=1;while [ $i -lt $size ];do
    echo cuu1
    i=$((i + 1))
  done | tput -S
  printf "\r" # begin of line
}

function _select
{
  typeset prompt="$1" newsel="$2" nbitems="$3" filter="$4" lines

  lines=${_maxlines:-$LINES}
  [ $lines -gt $LINES ] && lines=$LINES
  _nsel=$(($newsel))
  [ $_nsel -lt 1 ] && _nsel=1
  [ $_nsel -ge $nbitems ] && _nsel=$nbitems
  _showmenu "$prompt" "$_nsel" "$nbitems" "$filter"
}

function _items_split
{
  typeset filter="$1" i=1 item

  [ "$filter" ] && {
    _nsel=""
    [[ "$filter" =~ ^[0-9]+$ ]] && _nsel=$filter || _items="$(printf "%s" "$_items" |egrep -- "$filter"|uniq)"
  }
  [ "$_nsel" ] && _items="${_aitems[$_nsel]}"
  _nsel=1
  unset _aitems
  while read -r item;do
    _aitems[$i]="$item"
    i=$((i+1))
  done <<EOT
$_items
EOT
}

function _domenu 
{
  typeset prompt="$1" filter="$2" nbitems o=n

  [ "$ZSH_VERSION" ] && o=k
  _items_split "$filter"
  [ "$_items" ] || return 1
  nbitems=${#_aitems[@]}
  [ "$nbitems" = 1 ] && {
    selected="${_aitems[1]}"
    unset _nsel
    return 0
  }
  _items_ori="$_items"
  filter=""
  tput civis
  stty -echo
  printf "\e[?7l"
  : ${LINES:=$(tput lines)}
  [ "$_maxlines" -gt 2 ] || unset _maxlines
  _showmenu "$prompt" "$_nsel" "$nbitems" ""
  while true
  do
    IFS= read -rs${o}1 k
    case $k in
      $'\x1b')
          filter=""
          read -rs${o}2 -t.001 k 2>/dev/null
          [ $? = 1 ] && read -rs${o}2 -t1 k
          case $k in 
            '[A') #up
              _select "$prompt" "_nsel-1" "$nbitems" "$filter";;
            '[B') #down
              _select "$prompt" "_nsel+1" "$nbitems" "$filter";;
            '[H'|'[D') #home or arrowleft
              _select "$prompt" "1" "$nbitems" "$filter";;
            '[F'|'[C') #end or arrowright
              _select "$prompt" "nbitems" "$nbitems" "$filter";;
            '[6') #pagedn [6~
              read -rs${o}1 -t.001 k 2>/dev/null
              [ $? = 1 ] && read -rs${o}1 -t1 k
              _select "$prompt" "_nsel+lines-1" "$nbitems" "$filter";;
            '[5') #pageup [5~
              read -rs${o}1 -t.001 k 2>/dev/null
              [ $? = 1 ] && read -rs${o}1 -t1 k
              _select "$prompt" "_nsel-lines+1" "$nbitems" "$filter";;
            *) break;;
          esac;;
      $'\x7f') #backspace
        filter=${filter%?}
        _items="$_items_ori"
        _nsel=""
        _items_split "$filter"
        nbitems=${#_aitems[@]}
        [ $_autofilter = y ] && _showmenu "$prompt" "$_nsel" "$nbitems" "$filter" || \
          _menuprompt "$prompt" "$nbitems" "$filter"
        ;;
      $'\xf8') #meta (macos)
        break;;
      [[:graph:]]|" ") #text [a-zA-Z0-9/_?*\(\)\ .-]) 
        filter="$filter$k"
        [ "$_autofilter" = y ] && [[ ! "$filter" =~ ^[0-9]+$ ]] && {
          _items_split "$filter"
          [ ! "$_items" ] && {
            printf "Not found !"
            read -rs${o}4 -t.5 k 2>/dev/null
            _items="$_items_ori"
            filter=""
            _nsel=""
            _items_split "$filter"
          }
          nbitems=${#_aitems[@]}
          tput ed
          _showmenu "$prompt" "$_nsel" "$nbitems" "$filter"
        }
        _menuprompt "$prompt" "$nbitems" "$filter";;
      $'\x06') # Ctl-F => pgdn
        _select "$prompt" "_nsel+lines-1" "$nbitems" "$filter";;
      $'\x02') # Ctl-B => pgup
        _select "$prompt" "_nsel-lines+1" "$nbitems" "$filter";;
      $'\x0c') # Ctl-L => refresh
        _showmenu "$prompt" "$_nsel" "$nbitems" "$filter";;
      $'\x01') # Ctl-A => all
        unset _maxlines
        _showmenu "$prompt" "$_nsel" "$nbitems" "$filter";;
      $'\x0d'|''|$'\n') #enter
        [[ "$filter" =~ ^[0-9]+$ ]] && selected="${_aitems[$filter]}" || selected="${_aitems[$_nsel]}"
        break;;     
      $'\t') # tab
        _items_split "$filter"
        [ ! "$_items" ] && break
        nbitems=${#_aitems[@]}
        [ $nbitems = 1 ] && selected="${_aitems[1]}" && break
        filter=""
        _items_ori="$_items"
        tput ed
        _showmenu "$prompt" "$_nsel" "$nbitems" "$filter";;
      *) break;
    esac
  done
  unset _nsel
  unset _aitems
  unset _items_ori
  tput ed
  tput cnorm
}

function selector
{
  typeset prompt filter
  prompt="select"
  selected=""
  _maxlines=0
  _autofilter=y
  _powerline=y
  while [ $# -gt 0 ]; do
    case "$1" in
      -p|--prompt)
        [ "$2" ] && prompt="$2" || return 1
        ;;
      -i|--items)
        [ "$2" ] && _items="$2" || return 1
        ;;
      -f|--file)
        [ "$2" ] && _items="$(cat $2)" || return 1
        ;;
      -m|--max)
        [ "$2" ] && _maxlines="$(($2+1))" || return 1
        ;;
      -P|--powerline)
        [ "$2" ] && _powerline="$2" || return 1
        ;;
      -F|--filter)
        [ "$2" ] && filter="$2" || return 1
        ;;
      -a|--autofilter)
        [ "$2" ] && _autofilter="$2" || return 1
        ;;
      *)
        printf "usage: selector [-p <prompt>] -i <items>|-f <itemfile> [-P <y|n>]\n"
        printf "args :\n"
        printf "%s\n" "  -p, --prompt          menu prompt"
        printf "%s\n" "  -i, --items           menu items \n separated"
        printf "%s\n" "  -f, --file            file with items"
        printf "%s\n" "  -F, --filter          regexp pattern filter items"
        printf "%s\n" "  -P, --powerline       y or n, powerline symbol usage"
        return 1
        ;;
    esac
    shift 2
  done
  _stty_ori=$(stty -g)
  trap _ctrl_c INT
  _domenu "$prompt" "$filter" >&2
  trap - INT
  stty $_stty_ori
  unset _items
  unset _maxlines
  unset _autofilter
  [ "$selected" ] && printf "%s" "$selected" && return 0
  return 1
}
